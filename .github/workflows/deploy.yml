name: Deploy Identity Service to Render with Docker

on:
  push:
    branches:
      - main  # Trigger when commits are pushed to the main branch

jobs:
  docker-build-push:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 3: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 4: Build the Docker image
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/identity-app:latest .

      # Step 5: Push Docker image to Docker Hub
      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/identity-app:latest

  deploy-to-render:
    needs: docker-build-push
    runs-on: ubuntu-latest

    steps:
      # Step 6: Log in to Render
      - name: Log in to Render
        run: |
          echo ${{ secrets.RENDER_API_KEY }} | curl -X POST https://api.render.com/deploy \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -d '{"serviceId": "identity-service"}'

      # Step 7: Deploy image from Docker Hub to Render
      - name: Deploy to Render
        run: |
          curl -X POST https://api.render.com/services/identity-service/deployments \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "image": "${{ secrets.DOCKER_USERNAME }}/identity-app:latest",
              "envVars": [
                {"key": "BUILD_NUMBER", "value": "${{ github.run_number }}"},
                {"key": "GIT_COMMIT", "value": "${{ github.sha }}"}
              ]
            }'

      # Step 8: Verify deployment
      - name: Wait for deployment and verify
        run: |
          echo "Waiting for deployment to complete..."
          sleep 60
          echo "Verifying deployment..."
          RESPONSE=$(curl -s https://identity-service.onrender.com/cicd-check || echo "Failed to connect")
          echo "Response from service: $RESPONSE"
          if [[ $RESPONSE == *"CI/CD pipeline is working correctly"* ]]; then
            echo "✅ CI/CD verification successful!"
          else
            echo "❌ CI/CD verification failed or service not yet available"
            echo "This is expected on the first run when the endpoint doesn't exist yet"
          fi
